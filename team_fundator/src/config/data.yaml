version: 1.0

model:
  name: "UNet"
  encoder_depth: 5
  encoder: "efficientnet-b4"
  aux_head: False
  aux_head_params:
    classes: 1 # binary building / no building classification
    pooling: "avg" # "max",  "avg"
    dropout: 0.2 # default 0.0


data_dirs:
  root: '..\..\data\overlapping_data'
  train: 'train'
  validation: 'validation'
  images: "images"
  lidar: "lidar"
  masks: "masks"

use_lidar_as_mask: True
dataset: "mapai" # "mapai", "landcover", "open_cities", "mapai_multiclass"
num_classes: 2
classes: ["background", "building"]
class_to_color:
  "background": 0
  "building": 1

augmentation:
  initial: 'normal'  # None, 'normal', 'hard', 'very_hard'
  warmup_epochs: 3 # number of epochs before switching to augmentation cycle
  cycle: ["hard", "normal", "normal"] # select augmentations with index (epoch - warmup_epochs) % len(cycle)

lidar_augs:
  clip_min: -1.0
  clip_max: 30.0
  norm: "max" # "max", "min_max"
  norm_basis: "clip" # "clip", "image"

training:
  losses:
    # "DiceLoss": smp.losses.DiceLoss,
    # "JaccardLoss": smp.losses.JaccardLoss,
    # "TverskyLoss": smp.losses.TverskyLoss,
    # "FocalLoss": smp.losses.FocalLoss,
    # "LovaszLoss": smp.losses.LovaszLoss,
    # "SoftBCEWithLogitsLoss": smp.losses.SoftBCEWithLogitsLoss,
    # "SoftCrossEntropyLoss": smp.losses.SoftCrossEntropyLoss
    names: ['SoftCrossEntropyLoss']
    weights: [1.0]
    SoftCrossEntropyLoss:
      init_params:
        smooth_factor: 0.01

  optimizer:
    name: Adam # Adam, SGD, RAdam, AdamWarmup
    init_params:
      lr: 0.0001

  scheduler:
    name: MultiStep # PolyLR, MultiStep
    init_params:
      milestones: [3]
  # fit:
  #   epochs: 50
  #   accumulation_steps: 4

imagesize: 512

# label_downscale: Bilinear # Bicubic, Bilinear
# antialiased_downscaling: True # Bicubic, and Bilinear only

train:
  epochs: 5
  batchsize: 2
  shuffle: True
  num_workers: 0
  data_ratio: 0.1

validation:
  batchsize: 2
  shuffle: False
  num_workers: 0
  data_ratio: 1.0